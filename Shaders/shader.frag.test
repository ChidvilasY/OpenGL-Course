#version 330

in vec4 vCol;
in vec2 TexCoord;
in vec3 Normal;
in vec3 FragPos;

out vec4 color;

struct DirectionalLight
{
	vec3 color;
	float ambientIntensity;
	vec3 direction;
	float diffuseIntensity;
};

struct Material
{
	float specularIntensity;
	float shininess;
};

uniform sampler2D theTexture;
uniform DirectionalLight directionalLight;
uniform Material material;

uniform vec3 eyePosition;

void main()
{
	// ambient
	vec3 ambient = directionalLight.color * directionalLight.ambientIntensity;

	// diffuse
	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(directionalLight.direction - FragPos);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = directionalLight.color * (diff * directionalLight.diffuseIntensity);

	// specular
	vec3 viewDir = normalize(eyePosition - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = directionalLight.color * (spec * material.specularIntensity);

	// color = texture(theTexture, TexCoord) * vec4(ambient + diffuse + (specular), 1.0);
	color = vec4(ambient.r, diffuse.g, specular.b, 1.0);
}